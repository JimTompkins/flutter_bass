// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Flutter plugin for the un4seen BASS audio library
class FlutterBASS {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterBASS(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterBASS.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int BASS_SetConfig(
    int option,
    int value,
  ) {
    return _BASS_SetConfig(
      option,
      value,
    );
  }

  late final _BASS_SetConfigPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_SetConfig');
  late final _BASS_SetConfig =
      _BASS_SetConfigPtr.asFunction<int Function(int, int)>();

  int BASS_GetConfig(
    int option,
  ) {
    return _BASS_GetConfig(
      option,
    );
  }

  late final _BASS_GetConfigPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>('BASS_GetConfig');
  late final _BASS_GetConfig =
      _BASS_GetConfigPtr.asFunction<int Function(int)>();

  int BASS_SetConfigPtr(
    int option,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _BASS_SetConfigPtr1(
      option,
      value,
    );
  }

  late final _BASS_SetConfigPtrPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, ffi.Pointer<ffi.Void>)>>(
          'BASS_SetConfigPtr');
  late final _BASS_SetConfigPtr1 = _BASS_SetConfigPtrPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BASS_GetConfigPtr(
    int option,
  ) {
    return _BASS_GetConfigPtr1(
      option,
    );
  }

  late final _BASS_GetConfigPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(DWORD)>>(
          'BASS_GetConfigPtr');
  late final _BASS_GetConfigPtr1 =
      _BASS_GetConfigPtrPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int BASS_GetVersion() {
    return _BASS_GetVersion();
  }

  late final _BASS_GetVersionPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_GetVersion');
  late final _BASS_GetVersion =
      _BASS_GetVersionPtr.asFunction<int Function()>();

  int BASS_ErrorGetCode() {
    return _BASS_ErrorGetCode();
  }

  late final _BASS_ErrorGetCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('BASS_ErrorGetCode');
  late final _BASS_ErrorGetCode =
      _BASS_ErrorGetCodePtr.asFunction<int Function()>();

  int BASS_GetDeviceInfo(
    int device,
    ffi.Pointer<BASS_DEVICEINFO> info,
  ) {
    return _BASS_GetDeviceInfo(
      device,
      info,
    );
  }

  late final _BASS_GetDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, ffi.Pointer<BASS_DEVICEINFO>)>>('BASS_GetDeviceInfo');
  late final _BASS_GetDeviceInfo = _BASS_GetDeviceInfoPtr.asFunction<
      int Function(int, ffi.Pointer<BASS_DEVICEINFO>)>();

  int BASS_Init(
    int device,
    int freq,
    int flags,
    ffi.Pointer<ffi.Void> win,
    ffi.Pointer<ffi.Void> dsguid,
  ) {
    return _BASS_Init(
      device,
      freq,
      flags,
      win,
      dsguid,
    );
  }

  late final _BASS_InitPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Int32, DWORD, DWORD, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('_BASS_Init');
  late final _BASS_Init = _BASS_InitPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int BASS_Free() {
    return _BASS_Free();
  }

  late final _BASS_FreePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_Free');
  late final _BASS_Free = _BASS_FreePtr.asFunction<int Function()>();

  int BASS_SetDevice(
    int device,
  ) {
    return _BASS_SetDevice(
      device,
    );
  }

  late final _BASS_SetDevicePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_SetDevice');
  late final _BASS_SetDevice =
      _BASS_SetDevicePtr.asFunction<int Function(int)>();

  int BASS_GetDevice() {
    return _BASS_GetDevice();
  }

  late final _BASS_GetDevicePtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_GetDevice');
  late final _BASS_GetDevice = _BASS_GetDevicePtr.asFunction<int Function()>();

  int BASS_GetInfo(
    ffi.Pointer<BASS_INFO> info,
  ) {
    return _BASS_GetInfo(
      info,
    );
  }

  late final _BASS_GetInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<BASS_INFO>)>>(
          'BASS_GetInfo');
  late final _BASS_GetInfo =
      _BASS_GetInfoPtr.asFunction<int Function(ffi.Pointer<BASS_INFO>)>();

  int BASS_Start() {
    return _BASS_Start();
  }

  late final _BASS_StartPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_Start');
  late final _BASS_Start = _BASS_StartPtr.asFunction<int Function()>();

  int BASS_Stop() {
    return _BASS_Stop();
  }

  late final _BASS_StopPtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_Stop');
  late final _BASS_Stop = _BASS_StopPtr.asFunction<int Function()>();

  int BASS_Pause() {
    return _BASS_Pause();
  }

  late final _BASS_PausePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_Pause');
  late final _BASS_Pause = _BASS_PausePtr.asFunction<int Function()>();

  int BASS_IsStarted() {
    return _BASS_IsStarted();
  }

  late final _BASS_IsStartedPtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_IsStarted');
  late final _BASS_IsStarted = _BASS_IsStartedPtr.asFunction<int Function()>();

  int BASS_Update(
    int length,
  ) {
    return _BASS_Update(
      length,
    );
  }

  late final _BASS_UpdatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_Update');
  late final _BASS_Update = _BASS_UpdatePtr.asFunction<int Function(int)>();

  double BASS_GetCPU() {
    return _BASS_GetCPU();
  }

  late final _BASS_GetCPUPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('BASS_GetCPU');
  late final _BASS_GetCPU = _BASS_GetCPUPtr.asFunction<double Function()>();

  int BASS_SetVolume(
    double volume,
  ) {
    return _BASS_SetVolume(
      volume,
    );
  }

  late final _BASS_SetVolumePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Float)>>('BASS_SetVolume');
  late final _BASS_SetVolume =
      _BASS_SetVolumePtr.asFunction<int Function(double)>();

  double BASS_GetVolume() {
    return _BASS_GetVolume();
  }

  late final _BASS_GetVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('BASS_GetVolume');
  late final _BASS_GetVolume =
      _BASS_GetVolumePtr.asFunction<double Function()>();

  int BASS_Set3DFactors(
    double distf,
    double rollf,
    double doppf,
  ) {
    return _BASS_Set3DFactors(
      distf,
      rollf,
      doppf,
    );
  }

  late final _BASS_Set3DFactorsPtr = _lookup<
          ffi.NativeFunction<BOOL Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'BASS_Set3DFactors');
  late final _BASS_Set3DFactors =
      _BASS_Set3DFactorsPtr.asFunction<int Function(double, double, double)>();

  int BASS_Get3DFactors(
    ffi.Pointer<ffi.Float> distf,
    ffi.Pointer<ffi.Float> rollf,
    ffi.Pointer<ffi.Float> doppf,
  ) {
    return _BASS_Get3DFactors(
      distf,
      rollf,
      doppf,
    );
  }

  late final _BASS_Get3DFactorsPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('BASS_Get3DFactors');
  late final _BASS_Get3DFactors = _BASS_Get3DFactorsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  int BASS_Set3DPosition(
    ffi.Pointer<BASS_3DVECTOR> pos,
    ffi.Pointer<BASS_3DVECTOR> vel,
    ffi.Pointer<BASS_3DVECTOR> front,
    ffi.Pointer<BASS_3DVECTOR> top,
  ) {
    return _BASS_Set3DPosition(
      pos,
      vel,
      front,
      top,
    );
  }

  late final _BASS_Set3DPositionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>)>>('BASS_Set3DPosition');
  late final _BASS_Set3DPosition = _BASS_Set3DPositionPtr.asFunction<
      int Function(ffi.Pointer<BASS_3DVECTOR>, ffi.Pointer<BASS_3DVECTOR>,
          ffi.Pointer<BASS_3DVECTOR>, ffi.Pointer<BASS_3DVECTOR>)>();

  int BASS_Get3DPosition(
    ffi.Pointer<BASS_3DVECTOR> pos,
    ffi.Pointer<BASS_3DVECTOR> vel,
    ffi.Pointer<BASS_3DVECTOR> front,
    ffi.Pointer<BASS_3DVECTOR> top,
  ) {
    return _BASS_Get3DPosition(
      pos,
      vel,
      front,
      top,
    );
  }

  late final _BASS_Get3DPositionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>)>>('BASS_Get3DPosition');
  late final _BASS_Get3DPosition = _BASS_Get3DPositionPtr.asFunction<
      int Function(ffi.Pointer<BASS_3DVECTOR>, ffi.Pointer<BASS_3DVECTOR>,
          ffi.Pointer<BASS_3DVECTOR>, ffi.Pointer<BASS_3DVECTOR>)>();

  void BASS_Apply3D() {
    return _BASS_Apply3D();
  }

  late final _BASS_Apply3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('BASS_Apply3D');
  late final _BASS_Apply3D = _BASS_Apply3DPtr.asFunction<void Function()>();

  int BASS_PluginLoad(
    ffi.Pointer<ffi.Int8> file,
    int flags,
  ) {
    return _BASS_PluginLoad(
      file,
      flags,
    );
  }

  late final _BASS_PluginLoadPtr = _lookup<
          ffi.NativeFunction<HPLUGIN Function(ffi.Pointer<ffi.Int8>, DWORD)>>(
      'BASS_PluginLoad');
  late final _BASS_PluginLoad = _BASS_PluginLoadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int)>();

  int BASS_PluginFree(
    int handle,
  ) {
    return _BASS_PluginFree(
      handle,
    );
  }

  late final _BASS_PluginFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HPLUGIN)>>('BASS_PluginFree');
  late final _BASS_PluginFree =
      _BASS_PluginFreePtr.asFunction<int Function(int)>();

  int BASS_PluginEnable(
    int handle,
    int enable,
  ) {
    return _BASS_PluginEnable(
      handle,
      enable,
    );
  }

  late final _BASS_PluginEnablePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HPLUGIN, BOOL)>>(
          'BASS_PluginEnable');
  late final _BASS_PluginEnable =
      _BASS_PluginEnablePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<BASS_PLUGININFO> BASS_PluginGetInfo(
    int handle,
  ) {
    return _BASS_PluginGetInfo(
      handle,
    );
  }

  late final _BASS_PluginGetInfoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BASS_PLUGININFO> Function(HPLUGIN)>>(
      'BASS_PluginGetInfo');
  late final _BASS_PluginGetInfo = _BASS_PluginGetInfoPtr.asFunction<
      ffi.Pointer<BASS_PLUGININFO> Function(int)>();

  int BASS_SampleLoad(
    int mem,
    ffi.Pointer<ffi.Void> file,
    int offset,
    int length,
    int max,
    int flags,
  ) {
    return _BASS_SampleLoad(
      mem,
      file,
      offset,
      length,
      max,
      flags,
    );
  }

  late final _BASS_SampleLoadPtr = _lookup<
      ffi.NativeFunction<
          HSAMPLE Function(BOOL, ffi.Pointer<ffi.Void>, QWORD, DWORD, DWORD,
              DWORD)>>('BASS_SampleLoad');
  late final _BASS_SampleLoad = _BASS_SampleLoadPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int BASS_SampleCreate(
    int length,
    int freq,
    int chans,
    int max,
    int flags,
  ) {
    return _BASS_SampleCreate(
      length,
      freq,
      chans,
      max,
      flags,
    );
  }

  late final _BASS_SampleCreatePtr = _lookup<
      ffi.NativeFunction<
          HSAMPLE Function(
              DWORD, DWORD, DWORD, DWORD, DWORD)>>('BASS_SampleCreate');
  late final _BASS_SampleCreate =
      _BASS_SampleCreatePtr.asFunction<int Function(int, int, int, int, int)>();

  int BASS_SampleFree(
    int handle,
  ) {
    return _BASS_SampleFree(
      handle,
    );
  }

  late final _BASS_SampleFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HSAMPLE)>>('BASS_SampleFree');
  late final _BASS_SampleFree =
      _BASS_SampleFreePtr.asFunction<int Function(int)>();

  int BASS_SampleSetData(
    int handle,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return _BASS_SampleSetData(
      handle,
      buffer,
    );
  }

  late final _BASS_SampleSetDataPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HSAMPLE, ffi.Pointer<ffi.Void>)>>(
      'BASS_SampleSetData');
  late final _BASS_SampleSetData = _BASS_SampleSetDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  int BASS_SampleGetData(
    int handle,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return _BASS_SampleGetData(
      handle,
      buffer,
    );
  }

  late final _BASS_SampleGetDataPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HSAMPLE, ffi.Pointer<ffi.Void>)>>(
      'BASS_SampleGetData');
  late final _BASS_SampleGetData = _BASS_SampleGetDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  int BASS_SampleGetInfo(
    int handle,
    ffi.Pointer<BASS_SAMPLE> info,
  ) {
    return _BASS_SampleGetInfo(
      handle,
      info,
    );
  }

  late final _BASS_SampleGetInfoPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HSAMPLE, ffi.Pointer<BASS_SAMPLE>)>>(
      'BASS_SampleGetInfo');
  late final _BASS_SampleGetInfo = _BASS_SampleGetInfoPtr.asFunction<
      int Function(int, ffi.Pointer<BASS_SAMPLE>)>();

  int BASS_SampleSetInfo(
    int handle,
    ffi.Pointer<BASS_SAMPLE> info,
  ) {
    return _BASS_SampleSetInfo(
      handle,
      info,
    );
  }

  late final _BASS_SampleSetInfoPtr = _lookup<
          ffi.NativeFunction<BOOL Function(HSAMPLE, ffi.Pointer<BASS_SAMPLE>)>>(
      'BASS_SampleSetInfo');
  late final _BASS_SampleSetInfo = _BASS_SampleSetInfoPtr.asFunction<
      int Function(int, ffi.Pointer<BASS_SAMPLE>)>();

  int BASS_SampleGetChannel(
    int handle,
    int flags,
  ) {
    return _BASS_SampleGetChannel(
      handle,
      flags,
    );
  }

  late final _BASS_SampleGetChannelPtr =
      _lookup<ffi.NativeFunction<DWORD Function(HSAMPLE, DWORD)>>(
          'BASS_SampleGetChannel');
  late final _BASS_SampleGetChannel =
      _BASS_SampleGetChannelPtr.asFunction<int Function(int, int)>();

  int BASS_SampleGetChannels(
    int handle,
    ffi.Pointer<HCHANNEL> channels,
  ) {
    return _BASS_SampleGetChannels(
      handle,
      channels,
    );
  }

  late final _BASS_SampleGetChannelsPtr = _lookup<
          ffi.NativeFunction<DWORD Function(HSAMPLE, ffi.Pointer<HCHANNEL>)>>(
      'BASS_SampleGetChannels');
  late final _BASS_SampleGetChannels = _BASS_SampleGetChannelsPtr.asFunction<
      int Function(int, ffi.Pointer<HCHANNEL>)>();

  int BASS_SampleStop(
    int handle,
  ) {
    return _BASS_SampleStop(
      handle,
    );
  }

  late final _BASS_SampleStopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HSAMPLE)>>('BASS_SampleStop');
  late final _BASS_SampleStop =
      _BASS_SampleStopPtr.asFunction<int Function(int)>();

  int BASS_StreamCreate(
    int freq,
    int chans,
    int flags,
    ffi.Pointer<STREAMPROC> proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_StreamCreate(
      freq,
      chans,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_StreamCreatePtr = _lookup<
      ffi.NativeFunction<
          HSTREAM Function(DWORD, DWORD, DWORD, ffi.Pointer<STREAMPROC>,
              ffi.Pointer<ffi.Void>)>>('BASS_StreamCreate');
  late final _BASS_StreamCreate = _BASS_StreamCreatePtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<STREAMPROC>, ffi.Pointer<ffi.Void>)>();

  int BASS_StreamCreateFile(
    int mem,
    ffi.Pointer<ffi.Void> file,
    int offset,
    int length,
    int flags,
  ) {
    return _BASS_StreamCreateFile(
      mem,
      file,
      offset,
      length,
      flags,
    );
  }

  late final _BASS_StreamCreateFilePtr = _lookup<
      ffi.NativeFunction<
          HSTREAM Function(BOOL, ffi.Pointer<ffi.Void>, QWORD, QWORD,
              DWORD)>>('BASS_StreamCreateFile');
  late final _BASS_StreamCreateFile = _BASS_StreamCreateFilePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, int)>();

  int BASS_StreamCreateURL(
    ffi.Pointer<ffi.Int8> url,
    int offset,
    int flags,
    ffi.Pointer<DOWNLOADPROC> proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_StreamCreateURL(
      url,
      offset,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_StreamCreateURLPtr = _lookup<
      ffi.NativeFunction<
          HSTREAM Function(
              ffi.Pointer<ffi.Int8>,
              DWORD,
              DWORD,
              ffi.Pointer<DOWNLOADPROC>,
              ffi.Pointer<ffi.Void>)>>('BASS_StreamCreateURL');
  late final _BASS_StreamCreateURL = _BASS_StreamCreateURLPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<DOWNLOADPROC>,
          ffi.Pointer<ffi.Void>)>();

  int BASS_StreamCreateFileUser(
    int system,
    int flags,
    ffi.Pointer<BASS_FILEPROCS> proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_StreamCreateFileUser(
      system,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_StreamCreateFileUserPtr = _lookup<
      ffi.NativeFunction<
          HSTREAM Function(DWORD, DWORD, ffi.Pointer<BASS_FILEPROCS>,
              ffi.Pointer<ffi.Void>)>>('BASS_StreamCreateFileUser');
  late final _BASS_StreamCreateFileUser =
      _BASS_StreamCreateFileUserPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<BASS_FILEPROCS>, ffi.Pointer<ffi.Void>)>();

  int BASS_StreamFree(
    int handle,
  ) {
    return _BASS_StreamFree(
      handle,
    );
  }

  late final _BASS_StreamFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HSTREAM)>>('BASS_StreamFree');
  late final _BASS_StreamFree =
      _BASS_StreamFreePtr.asFunction<int Function(int)>();

  int BASS_StreamGetFilePosition(
    int handle,
    int mode,
  ) {
    return _BASS_StreamGetFilePosition(
      handle,
      mode,
    );
  }

  late final _BASS_StreamGetFilePositionPtr =
      _lookup<ffi.NativeFunction<QWORD Function(HSTREAM, DWORD)>>(
          'BASS_StreamGetFilePosition');
  late final _BASS_StreamGetFilePosition =
      _BASS_StreamGetFilePositionPtr.asFunction<int Function(int, int)>();

  int BASS_StreamPutData(
    int handle,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_StreamPutData(
      handle,
      buffer,
      length,
    );
  }

  late final _BASS_StreamPutDataPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              HSTREAM, ffi.Pointer<ffi.Void>, DWORD)>>('BASS_StreamPutData');
  late final _BASS_StreamPutData = _BASS_StreamPutDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int BASS_StreamPutFileData(
    int handle,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_StreamPutFileData(
      handle,
      buffer,
      length,
    );
  }

  late final _BASS_StreamPutFileDataPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(HSTREAM, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_StreamPutFileData');
  late final _BASS_StreamPutFileData = _BASS_StreamPutFileDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int BASS_MusicLoad(
    int mem,
    ffi.Pointer<ffi.Void> file,
    int offset,
    int length,
    int flags,
    int freq,
  ) {
    return _BASS_MusicLoad(
      mem,
      file,
      offset,
      length,
      flags,
      freq,
    );
  }

  late final _BASS_MusicLoadPtr = _lookup<
      ffi.NativeFunction<
          HMUSIC Function(BOOL, ffi.Pointer<ffi.Void>, QWORD, DWORD, DWORD,
              DWORD)>>('BASS_MusicLoad');
  late final _BASS_MusicLoad = _BASS_MusicLoadPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int BASS_MusicFree(
    int handle,
  ) {
    return _BASS_MusicFree(
      handle,
    );
  }

  late final _BASS_MusicFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(HMUSIC)>>('BASS_MusicFree');
  late final _BASS_MusicFree =
      _BASS_MusicFreePtr.asFunction<int Function(int)>();

  int BASS_RecordGetDeviceInfo(
    int device,
    ffi.Pointer<BASS_DEVICEINFO> info,
  ) {
    return _BASS_RecordGetDeviceInfo(
      device,
      info,
    );
  }

  late final _BASS_RecordGetDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD,
              ffi.Pointer<BASS_DEVICEINFO>)>>('BASS_RecordGetDeviceInfo');
  late final _BASS_RecordGetDeviceInfo = _BASS_RecordGetDeviceInfoPtr
      .asFunction<int Function(int, ffi.Pointer<BASS_DEVICEINFO>)>();

  int BASS_RecordInit(
    int device,
  ) {
    return _BASS_RecordInit(
      device,
    );
  }

  late final _BASS_RecordInitPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32)>>('BASS_RecordInit');
  late final _BASS_RecordInit =
      _BASS_RecordInitPtr.asFunction<int Function(int)>();

  int BASS_RecordFree() {
    return _BASS_RecordFree();
  }

  late final _BASS_RecordFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function()>>('BASS_RecordFree');
  late final _BASS_RecordFree =
      _BASS_RecordFreePtr.asFunction<int Function()>();

  int BASS_RecordSetDevice(
    int device,
  ) {
    return _BASS_RecordSetDevice(
      device,
    );
  }

  late final _BASS_RecordSetDevicePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_RecordSetDevice');
  late final _BASS_RecordSetDevice =
      _BASS_RecordSetDevicePtr.asFunction<int Function(int)>();

  int BASS_RecordGetDevice() {
    return _BASS_RecordGetDevice();
  }

  late final _BASS_RecordGetDevicePtr =
      _lookup<ffi.NativeFunction<DWORD Function()>>('BASS_RecordGetDevice');
  late final _BASS_RecordGetDevice =
      _BASS_RecordGetDevicePtr.asFunction<int Function()>();

  int BASS_RecordGetInfo(
    ffi.Pointer<BASS_RECORDINFO> info,
  ) {
    return _BASS_RecordGetInfo(
      info,
    );
  }

  late final _BASS_RecordGetInfoPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<BASS_RECORDINFO>)>>(
          'BASS_RecordGetInfo');
  late final _BASS_RecordGetInfo = _BASS_RecordGetInfoPtr.asFunction<
      int Function(ffi.Pointer<BASS_RECORDINFO>)>();

  ffi.Pointer<ffi.Int8> BASS_RecordGetInputName(
    int input,
  ) {
    return _BASS_RecordGetInputName(
      input,
    );
  }

  late final _BASS_RecordGetInputNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'BASS_RecordGetInputName');
  late final _BASS_RecordGetInputName = _BASS_RecordGetInputNamePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int)>();

  int BASS_RecordSetInput(
    int input,
    int flags,
    double volume,
  ) {
    return _BASS_RecordSetInput(
      input,
      flags,
      volume,
    );
  }

  late final _BASS_RecordSetInputPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Int32, DWORD, ffi.Float)>>(
          'BASS_RecordSetInput');
  late final _BASS_RecordSetInput =
      _BASS_RecordSetInputPtr.asFunction<int Function(int, int, double)>();

  int BASS_RecordGetInput(
    int input,
    ffi.Pointer<ffi.Float> volume,
  ) {
    return _BASS_RecordGetInput(
      input,
      volume,
    );
  }

  late final _BASS_RecordGetInputPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              ffi.Int32, ffi.Pointer<ffi.Float>)>>('BASS_RecordGetInput');
  late final _BASS_RecordGetInput = _BASS_RecordGetInputPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Float>)>();

  int BASS_RecordStart(
    int freq,
    int chans,
    int flags,
    ffi.Pointer<RECORDPROC> proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_RecordStart(
      freq,
      chans,
      flags,
      proc,
      user,
    );
  }

  late final _BASS_RecordStartPtr = _lookup<
      ffi.NativeFunction<
          HRECORD Function(DWORD, DWORD, DWORD, ffi.Pointer<RECORDPROC>,
              ffi.Pointer<ffi.Void>)>>('BASS_RecordStart');
  late final _BASS_RecordStart = _BASS_RecordStartPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<RECORDPROC>, ffi.Pointer<ffi.Void>)>();

  double BASS_ChannelBytes2Seconds(
    int handle,
    int pos,
  ) {
    return _BASS_ChannelBytes2Seconds(
      handle,
      pos,
    );
  }

  late final _BASS_ChannelBytes2SecondsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(DWORD, QWORD)>>(
          'BASS_ChannelBytes2Seconds');
  late final _BASS_ChannelBytes2Seconds =
      _BASS_ChannelBytes2SecondsPtr.asFunction<double Function(int, int)>();

  int BASS_ChannelSeconds2Bytes(
    int handle,
    double pos,
  ) {
    return _BASS_ChannelSeconds2Bytes(
      handle,
      pos,
    );
  }

  late final _BASS_ChannelSeconds2BytesPtr =
      _lookup<ffi.NativeFunction<QWORD Function(DWORD, ffi.Double)>>(
          'BASS_ChannelSeconds2Bytes');
  late final _BASS_ChannelSeconds2Bytes =
      _BASS_ChannelSeconds2BytesPtr.asFunction<int Function(int, double)>();

  int BASS_ChannelGetDevice(
    int handle,
  ) {
    return _BASS_ChannelGetDevice(
      handle,
    );
  }

  late final _BASS_ChannelGetDevicePtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>(
          'BASS_ChannelGetDevice');
  late final _BASS_ChannelGetDevice =
      _BASS_ChannelGetDevicePtr.asFunction<int Function(int)>();

  int BASS_ChannelSetDevice(
    int handle,
    int device,
  ) {
    return _BASS_ChannelSetDevice(
      handle,
      device,
    );
  }

  late final _BASS_ChannelSetDevicePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_ChannelSetDevice');
  late final _BASS_ChannelSetDevice =
      _BASS_ChannelSetDevicePtr.asFunction<int Function(int, int)>();

  int BASS_ChannelIsActive(
    int handle,
  ) {
    return _BASS_ChannelIsActive(
      handle,
    );
  }

  late final _BASS_ChannelIsActivePtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>(
          'BASS_ChannelIsActive');
  late final _BASS_ChannelIsActive =
      _BASS_ChannelIsActivePtr.asFunction<int Function(int)>();

  int BASS_ChannelGetInfo(
    int handle,
    ffi.Pointer<BASS_CHANNELINFO> info,
  ) {
    return _BASS_ChannelGetInfo(
      handle,
      info,
    );
  }

  late final _BASS_ChannelGetInfoPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD, ffi.Pointer<BASS_CHANNELINFO>)>>('BASS_ChannelGetInfo');
  late final _BASS_ChannelGetInfo = _BASS_ChannelGetInfoPtr.asFunction<
      int Function(int, ffi.Pointer<BASS_CHANNELINFO>)>();

  ffi.Pointer<ffi.Int8> BASS_ChannelGetTags(
    int handle,
    int tags,
  ) {
    return _BASS_ChannelGetTags(
      handle,
      tags,
    );
  }

  late final _BASS_ChannelGetTagsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(DWORD, DWORD)>>(
          'BASS_ChannelGetTags');
  late final _BASS_ChannelGetTags = _BASS_ChannelGetTagsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, int)>();

  int BASS_ChannelFlags(
    int handle,
    int flags,
    int mask,
  ) {
    return _BASS_ChannelFlags(
      handle,
      flags,
      mask,
    );
  }

  late final _BASS_ChannelFlagsPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD, DWORD, DWORD)>>(
          'BASS_ChannelFlags');
  late final _BASS_ChannelFlags =
      _BASS_ChannelFlagsPtr.asFunction<int Function(int, int, int)>();

  int BASS_ChannelLock(
    int handle,
    int lock,
  ) {
    return _BASS_ChannelLock(
      handle,
      lock,
    );
  }

  late final _BASS_ChannelLockPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'BASS_ChannelLock');
  late final _BASS_ChannelLock =
      _BASS_ChannelLockPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelFree(
    int handle,
  ) {
    return _BASS_ChannelFree(
      handle,
    );
  }

  late final _BASS_ChannelFreePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_ChannelFree');
  late final _BASS_ChannelFree =
      _BASS_ChannelFreePtr.asFunction<int Function(int)>();

  int BASS_ChannelPlay(
    int handle,
    int restart,
  ) {
    return _BASS_ChannelPlay(
      handle,
      restart,
    );
  }

  late final _BASS_ChannelPlayPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, BOOL)>>(
          'BASS_ChannelPlay');
  late final _BASS_ChannelPlay =
      _BASS_ChannelPlayPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelStop(
    int handle,
  ) {
    return _BASS_ChannelStop(
      handle,
    );
  }

  late final _BASS_ChannelStopPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_ChannelStop');
  late final _BASS_ChannelStop =
      _BASS_ChannelStopPtr.asFunction<int Function(int)>();

  int BASS_ChannelPause(
    int handle,
  ) {
    return _BASS_ChannelPause(
      handle,
    );
  }

  late final _BASS_ChannelPausePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_ChannelPause');
  late final _BASS_ChannelPause =
      _BASS_ChannelPausePtr.asFunction<int Function(int)>();

  int BASS_ChannelUpdate(
    int handle,
    int length,
  ) {
    return _BASS_ChannelUpdate(
      handle,
      length,
    );
  }

  late final _BASS_ChannelUpdatePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_ChannelUpdate');
  late final _BASS_ChannelUpdate =
      _BASS_ChannelUpdatePtr.asFunction<int Function(int, int)>();

  int BASS_ChannelSetAttribute(
    int handle,
    int attrib,
    double value,
  ) {
    return _BASS_ChannelSetAttribute(
      handle,
      attrib,
      value,
    );
  }

  late final _BASS_ChannelSetAttributePtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD, ffi.Float)>>(
          'BASS_ChannelSetAttribute');
  late final _BASS_ChannelSetAttribute =
      _BASS_ChannelSetAttributePtr.asFunction<int Function(int, int, double)>();

  int BASS_ChannelGetAttribute(
    int handle,
    int attrib,
    ffi.Pointer<ffi.Float> value,
  ) {
    return _BASS_ChannelGetAttribute(
      handle,
      attrib,
      value,
    );
  }

  late final _BASS_ChannelGetAttributePtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, DWORD,
              ffi.Pointer<ffi.Float>)>>('BASS_ChannelGetAttribute');
  late final _BASS_ChannelGetAttribute = _BASS_ChannelGetAttributePtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Float>)>();

  int BASS_ChannelSlideAttribute(
    int handle,
    int attrib,
    double value,
    int time,
  ) {
    return _BASS_ChannelSlideAttribute(
      handle,
      attrib,
      value,
      time,
    );
  }

  late final _BASS_ChannelSlideAttributePtr = _lookup<
          ffi.NativeFunction<BOOL Function(DWORD, DWORD, ffi.Float, DWORD)>>(
      'BASS_ChannelSlideAttribute');
  late final _BASS_ChannelSlideAttribute = _BASS_ChannelSlideAttributePtr
      .asFunction<int Function(int, int, double, int)>();

  int BASS_ChannelIsSliding(
    int handle,
    int attrib,
  ) {
    return _BASS_ChannelIsSliding(
      handle,
      attrib,
    );
  }

  late final _BASS_ChannelIsSlidingPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_ChannelIsSliding');
  late final _BASS_ChannelIsSliding =
      _BASS_ChannelIsSlidingPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelSetAttributeEx(
    int handle,
    int attrib,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return _BASS_ChannelSetAttributeEx(
      handle,
      attrib,
      value,
      size,
    );
  }

  late final _BASS_ChannelSetAttributeExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, DWORD, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_ChannelSetAttributeEx');
  late final _BASS_ChannelSetAttributeEx = _BASS_ChannelSetAttributeExPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int BASS_ChannelGetAttributeEx(
    int handle,
    int attrib,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return _BASS_ChannelGetAttributeEx(
      handle,
      attrib,
      value,
      size,
    );
  }

  late final _BASS_ChannelGetAttributeExPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(DWORD, DWORD, ffi.Pointer<ffi.Void>,
              DWORD)>>('BASS_ChannelGetAttributeEx');
  late final _BASS_ChannelGetAttributeEx = _BASS_ChannelGetAttributeExPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int BASS_ChannelSet3DAttributes(
    int handle,
    int mode,
    double min,
    double max,
    int iangle,
    int oangle,
    double outvol,
  ) {
    return _BASS_ChannelSet3DAttributes(
      handle,
      mode,
      min,
      max,
      iangle,
      oangle,
      outvol,
    );
  }

  late final _BASS_ChannelSet3DAttributesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Int32, ffi.Float, ffi.Float, ffi.Int32,
              ffi.Int32, ffi.Float)>>('BASS_ChannelSet3DAttributes');
  late final _BASS_ChannelSet3DAttributes = _BASS_ChannelSet3DAttributesPtr
      .asFunction<int Function(int, int, double, double, int, int, double)>();

  int BASS_ChannelGet3DAttributes(
    int handle,
    ffi.Pointer<DWORD> mode,
    ffi.Pointer<ffi.Float> min,
    ffi.Pointer<ffi.Float> max,
    ffi.Pointer<DWORD> iangle,
    ffi.Pointer<DWORD> oangle,
    ffi.Pointer<ffi.Float> outvol,
  ) {
    return _BASS_ChannelGet3DAttributes(
      handle,
      mode,
      min,
      max,
      iangle,
      oangle,
      outvol,
    );
  }

  late final _BASS_ChannelGet3DAttributesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD,
              ffi.Pointer<DWORD>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<DWORD>,
              ffi.Pointer<DWORD>,
              ffi.Pointer<ffi.Float>)>>('BASS_ChannelGet3DAttributes');
  late final _BASS_ChannelGet3DAttributes =
      _BASS_ChannelGet3DAttributesPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<DWORD>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<DWORD>,
              ffi.Pointer<DWORD>,
              ffi.Pointer<ffi.Float>)>();

  int BASS_ChannelSet3DPosition(
    int handle,
    ffi.Pointer<BASS_3DVECTOR> pos,
    ffi.Pointer<BASS_3DVECTOR> orient,
    ffi.Pointer<BASS_3DVECTOR> vel,
  ) {
    return _BASS_ChannelSet3DPosition(
      handle,
      pos,
      orient,
      vel,
    );
  }

  late final _BASS_ChannelSet3DPositionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>)>>('BASS_ChannelSet3DPosition');
  late final _BASS_ChannelSet3DPosition =
      _BASS_ChannelSet3DPositionPtr.asFunction<
          int Function(int, ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>, ffi.Pointer<BASS_3DVECTOR>)>();

  int BASS_ChannelGet3DPosition(
    int handle,
    ffi.Pointer<BASS_3DVECTOR> pos,
    ffi.Pointer<BASS_3DVECTOR> orient,
    ffi.Pointer<BASS_3DVECTOR> vel,
  ) {
    return _BASS_ChannelGet3DPosition(
      handle,
      pos,
      orient,
      vel,
    );
  }

  late final _BASS_ChannelGet3DPositionPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              DWORD,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>)>>('BASS_ChannelGet3DPosition');
  late final _BASS_ChannelGet3DPosition =
      _BASS_ChannelGet3DPositionPtr.asFunction<
          int Function(int, ffi.Pointer<BASS_3DVECTOR>,
              ffi.Pointer<BASS_3DVECTOR>, ffi.Pointer<BASS_3DVECTOR>)>();

  int BASS_ChannelGetLength(
    int handle,
    int mode,
  ) {
    return _BASS_ChannelGetLength(
      handle,
      mode,
    );
  }

  late final _BASS_ChannelGetLengthPtr =
      _lookup<ffi.NativeFunction<QWORD Function(DWORD, DWORD)>>(
          'BASS_ChannelGetLength');
  late final _BASS_ChannelGetLength =
      _BASS_ChannelGetLengthPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelSetPosition(
    int handle,
    int pos,
    int mode,
  ) {
    return _BASS_ChannelSetPosition(
      handle,
      pos,
      mode,
    );
  }

  late final _BASS_ChannelSetPositionPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, QWORD, DWORD)>>(
          'BASS_ChannelSetPosition');
  late final _BASS_ChannelSetPosition =
      _BASS_ChannelSetPositionPtr.asFunction<int Function(int, int, int)>();

  int BASS_ChannelGetPosition(
    int handle,
    int mode,
  ) {
    return _BASS_ChannelGetPosition(
      handle,
      mode,
    );
  }

  late final _BASS_ChannelGetPositionPtr =
      _lookup<ffi.NativeFunction<QWORD Function(DWORD, DWORD)>>(
          'BASS_ChannelGetPosition');
  late final _BASS_ChannelGetPosition =
      _BASS_ChannelGetPositionPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelGetLevel(
    int handle,
  ) {
    return _BASS_ChannelGetLevel(
      handle,
    );
  }

  late final _BASS_ChannelGetLevelPtr =
      _lookup<ffi.NativeFunction<DWORD Function(DWORD)>>(
          'BASS_ChannelGetLevel');
  late final _BASS_ChannelGetLevel =
      _BASS_ChannelGetLevelPtr.asFunction<int Function(int)>();

  int BASS_ChannelGetLevelEx(
    int handle,
    ffi.Pointer<ffi.Float> levels,
    double length,
    int flags,
  ) {
    return _BASS_ChannelGetLevelEx(
      handle,
      levels,
      length,
      flags,
    );
  }

  late final _BASS_ChannelGetLevelExPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(DWORD, ffi.Pointer<ffi.Float>, ffi.Float,
              DWORD)>>('BASS_ChannelGetLevelEx');
  late final _BASS_ChannelGetLevelEx = _BASS_ChannelGetLevelExPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Float>, double, int)>();

  int BASS_ChannelGetData(
    int handle,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return _BASS_ChannelGetData(
      handle,
      buffer,
      length,
    );
  }

  late final _BASS_ChannelGetDataPtr = _lookup<
      ffi.NativeFunction<
          DWORD Function(
              DWORD, ffi.Pointer<ffi.Void>, DWORD)>>('BASS_ChannelGetData');
  late final _BASS_ChannelGetData = _BASS_ChannelGetDataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int BASS_ChannelSetSync(
    int handle,
    int type,
    int param,
    ffi.Pointer<SYNCPROC> proc,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _BASS_ChannelSetSync(
      handle,
      type,
      param,
      proc,
      user,
    );
  }

  late final _BASS_ChannelSetSyncPtr = _lookup<
      ffi.NativeFunction<
          HSYNC Function(DWORD, DWORD, QWORD, ffi.Pointer<SYNCPROC>,
              ffi.Pointer<ffi.Void>)>>('BASS_ChannelSetSync');
  late final _BASS_ChannelSetSync = _BASS_ChannelSetSyncPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<SYNCPROC>, ffi.Pointer<ffi.Void>)>();

  int BASS_ChannelRemoveSync(
    int handle,
    int sync1,
  ) {
    return _BASS_ChannelRemoveSync(
      handle,
      sync1,
    );
  }

  late final _BASS_ChannelRemoveSyncPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, HSYNC)>>(
          'BASS_ChannelRemoveSync');
  late final _BASS_ChannelRemoveSync =
      _BASS_ChannelRemoveSyncPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelSetLink(
    int handle,
    int chan,
  ) {
    return _BASS_ChannelSetLink(
      handle,
      chan,
    );
  }

  late final _BASS_ChannelSetLinkPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_ChannelSetLink');
  late final _BASS_ChannelSetLink =
      _BASS_ChannelSetLinkPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelRemoveLink(
    int handle,
    int chan,
  ) {
    return _BASS_ChannelRemoveLink(
      handle,
      chan,
    );
  }

  late final _BASS_ChannelRemoveLinkPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, DWORD)>>(
          'BASS_ChannelRemoveLink');
  late final _BASS_ChannelRemoveLink =
      _BASS_ChannelRemoveLinkPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelSetDSP(
    int handle,
    ffi.Pointer<DSPPROC> proc,
    ffi.Pointer<ffi.Void> user,
    int priority,
  ) {
    return _BASS_ChannelSetDSP(
      handle,
      proc,
      user,
      priority,
    );
  }

  late final _BASS_ChannelSetDSPPtr = _lookup<
      ffi.NativeFunction<
          HDSP Function(DWORD, ffi.Pointer<DSPPROC>, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('BASS_ChannelSetDSP');
  late final _BASS_ChannelSetDSP = _BASS_ChannelSetDSPPtr.asFunction<
      int Function(int, ffi.Pointer<DSPPROC>, ffi.Pointer<ffi.Void>, int)>();

  int BASS_ChannelRemoveDSP(
    int handle,
    int dsp,
  ) {
    return _BASS_ChannelRemoveDSP(
      handle,
      dsp,
    );
  }

  late final _BASS_ChannelRemoveDSPPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, HDSP)>>(
          'BASS_ChannelRemoveDSP');
  late final _BASS_ChannelRemoveDSP =
      _BASS_ChannelRemoveDSPPtr.asFunction<int Function(int, int)>();

  int BASS_ChannelSetFX(
    int handle,
    int type,
    int priority,
  ) {
    return _BASS_ChannelSetFX(
      handle,
      type,
      priority,
    );
  }

  late final _BASS_ChannelSetFXPtr =
      _lookup<ffi.NativeFunction<HFX Function(DWORD, DWORD, ffi.Int32)>>(
          'BASS_ChannelSetFX');
  late final _BASS_ChannelSetFX =
      _BASS_ChannelSetFXPtr.asFunction<int Function(int, int, int)>();

  int BASS_ChannelRemoveFX(
    int handle,
    int fx,
  ) {
    return _BASS_ChannelRemoveFX(
      handle,
      fx,
    );
  }

  late final _BASS_ChannelRemoveFXPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD, HFX)>>(
          'BASS_ChannelRemoveFX');
  late final _BASS_ChannelRemoveFX =
      _BASS_ChannelRemoveFXPtr.asFunction<int Function(int, int)>();

  int BASS_FXSetParameters(
    int handle,
    ffi.Pointer<ffi.Void> params,
  ) {
    return _BASS_FXSetParameters(
      handle,
      params,
    );
  }

  late final _BASS_FXSetParametersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HFX, ffi.Pointer<ffi.Void>)>>(
          'BASS_FXSetParameters');
  late final _BASS_FXSetParameters = _BASS_FXSetParametersPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  int BASS_FXGetParameters(
    int handle,
    ffi.Pointer<ffi.Void> params,
  ) {
    return _BASS_FXGetParameters(
      handle,
      params,
    );
  }

  late final _BASS_FXGetParametersPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HFX, ffi.Pointer<ffi.Void>)>>(
          'BASS_FXGetParameters');
  late final _BASS_FXGetParameters = _BASS_FXGetParametersPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  int BASS_FXSetPriority(
    int handle,
    int priority,
  ) {
    return _BASS_FXSetPriority(
      handle,
      priority,
    );
  }

  late final _BASS_FXSetPriorityPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HFX, ffi.Int32)>>(
          'BASS_FXSetPriority');
  late final _BASS_FXSetPriority =
      _BASS_FXSetPriorityPtr.asFunction<int Function(int, int)>();

  int BASS_FXReset(
    int handle,
  ) {
    return _BASS_FXReset(
      handle,
    );
  }

  late final _BASS_FXResetPtr =
      _lookup<ffi.NativeFunction<BOOL Function(DWORD)>>('BASS_FXReset');
  late final _BASS_FXReset = _BASS_FXResetPtr.asFunction<int Function(int)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> __mbstate8;

  @ffi.Int64()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class BASS_DEVICEINFO extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> driver;

  @DWORD()
  external int flags;
}

typedef DWORD = ffi.Uint32;

class BASS_INFO extends ffi.Struct {
  @DWORD()
  external int flags;

  @DWORD()
  external int hwsize;

  @DWORD()
  external int hwfree;

  @DWORD()
  external int freesam;

  @DWORD()
  external int free3d;

  @DWORD()
  external int minrate;

  @DWORD()
  external int maxrate;

  @BOOL()
  external int eax;

  @DWORD()
  external int minbuf;

  @DWORD()
  external int dsver;

  @DWORD()
  external int latency;

  @DWORD()
  external int initflags;

  @DWORD()
  external int speakers;

  @DWORD()
  external int freq;
}

typedef BOOL = ffi.Int32;

class BASS_RECORDINFO extends ffi.Struct {
  @DWORD()
  external int flags;

  @DWORD()
  external int formats;

  @DWORD()
  external int inputs;

  @BOOL()
  external int singlein;

  @DWORD()
  external int freq;
}

class BASS_SAMPLE extends ffi.Struct {
  @DWORD()
  external int freq;

  @ffi.Float()
  external double volume;

  @ffi.Float()
  external double pan;

  @DWORD()
  external int flags;

  @DWORD()
  external int length;

  @DWORD()
  external int max;

  @DWORD()
  external int origres;

  @DWORD()
  external int chans;

  @DWORD()
  external int mingap;

  @DWORD()
  external int mode3d;

  @ffi.Float()
  external double mindist;

  @ffi.Float()
  external double maxdist;

  @DWORD()
  external int iangle;

  @DWORD()
  external int oangle;

  @ffi.Float()
  external double outvol;

  @DWORD()
  external int vam;

  @DWORD()
  external int priority;
}

class BASS_CHANNELINFO extends ffi.Struct {
  @DWORD()
  external int freq;

  @DWORD()
  external int chans;

  @DWORD()
  external int flags;

  @DWORD()
  external int ctype;

  @DWORD()
  external int origres;

  @HPLUGIN()
  external int plugin;

  @HSAMPLE()
  external int sample;

  external ffi.Pointer<ffi.Int8> filename;
}

typedef HPLUGIN = DWORD;
typedef HSAMPLE = DWORD;

class BASS_PLUGINFORM extends ffi.Struct {
  @DWORD()
  external int ctype;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> exts;
}

class BASS_PLUGININFO extends ffi.Struct {
  @DWORD()
  external int version;

  @DWORD()
  external int formatc;

  external ffi.Pointer<BASS_PLUGINFORM> formats;
}

class BASS_3DVECTOR extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

class BASS_FILEPROCS extends ffi.Struct {
  external ffi.Pointer<FILECLOSEPROC> close;

  external ffi.Pointer<FILELENPROC> length;

  external ffi.Pointer<FILEREADPROC> read;

  external ffi.Pointer<FILESEEKPROC> seek;
}

typedef FILECLOSEPROC
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>;
typedef FILELENPROC = ffi.NativeFunction<QWORD Function(ffi.Pointer<ffi.Void>)>;
typedef QWORD = ffi.Uint64;
typedef FILEREADPROC = ffi.NativeFunction<
    DWORD Function(ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>;
typedef FILESEEKPROC
    = ffi.NativeFunction<BOOL Function(QWORD, ffi.Pointer<ffi.Void>)>;

class TAG_ID3 extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int8> id;

  @ffi.Array.multi([30])
  external ffi.Array<ffi.Int8> title;

  @ffi.Array.multi([30])
  external ffi.Array<ffi.Int8> artist;

  @ffi.Array.multi([30])
  external ffi.Array<ffi.Int8> album;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> year;

  @ffi.Array.multi([30])
  external ffi.Array<ffi.Int8> comment;

  @BYTE()
  external int genre;
}

typedef BYTE = ffi.Uint8;

class TAG_APE_BINARY extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> key;

  external ffi.Pointer<ffi.Void> data;

  @DWORD()
  external int length;
}

class TAG_BEXT extends ffi.Opaque {}

class TAG_CART_TIMER extends ffi.Struct {
  @DWORD()
  external int dwUsage;

  @DWORD()
  external int dwValue;
}

class TAG_CART extends ffi.Opaque {}

class TAG_CUE_POINT extends ffi.Struct {
  @DWORD()
  external int dwName;

  @DWORD()
  external int dwPosition;

  @DWORD()
  external int fccChunk;

  @DWORD()
  external int dwChunkStart;

  @DWORD()
  external int dwBlockStart;

  @DWORD()
  external int dwSampleOffset;
}

class TAG_CUE extends ffi.Opaque {}

class TAG_SMPL_LOOP extends ffi.Struct {
  @DWORD()
  external int dwIdentifier;

  @DWORD()
  external int dwType;

  @DWORD()
  external int dwStart;

  @DWORD()
  external int dwEnd;

  @DWORD()
  external int dwFraction;

  @DWORD()
  external int dwPlayCount;
}

class TAG_SMPL extends ffi.Opaque {}

class TAG_CA_CODEC extends ffi.Struct {
  @DWORD()
  external int ftype;

  @DWORD()
  external int atype;

  external ffi.Pointer<ffi.Int8> name;
}

@ffi.Packed(1)
class tWAVEFORMATEX extends ffi.Struct {
  @WORD()
  external int wFormatTag;

  @WORD()
  external int nChannels;

  @DWORD()
  external int nSamplesPerSec;

  @DWORD()
  external int nAvgBytesPerSec;

  @WORD()
  external int nBlockAlign;

  @WORD()
  external int wBitsPerSample;

  @WORD()
  external int cbSize;
}

typedef WORD = ffi.Uint16;

class BASS_DX8_CHORUS extends ffi.Struct {
  @ffi.Float()
  external double fWetDryMix;

  @ffi.Float()
  external double fDepth;

  @ffi.Float()
  external double fFeedback;

  @ffi.Float()
  external double fFrequency;

  @DWORD()
  external int lWaveform;

  @ffi.Float()
  external double fDelay;

  @DWORD()
  external int lPhase;
}

class BASS_DX8_COMPRESSOR extends ffi.Struct {
  @ffi.Float()
  external double fGain;

  @ffi.Float()
  external double fAttack;

  @ffi.Float()
  external double fRelease;

  @ffi.Float()
  external double fThreshold;

  @ffi.Float()
  external double fRatio;

  @ffi.Float()
  external double fPredelay;
}

class BASS_DX8_DISTORTION extends ffi.Struct {
  @ffi.Float()
  external double fGain;

  @ffi.Float()
  external double fEdge;

  @ffi.Float()
  external double fPostEQCenterFrequency;

  @ffi.Float()
  external double fPostEQBandwidth;

  @ffi.Float()
  external double fPreLowpassCutoff;
}

class BASS_DX8_ECHO extends ffi.Struct {
  @ffi.Float()
  external double fWetDryMix;

  @ffi.Float()
  external double fFeedback;

  @ffi.Float()
  external double fLeftDelay;

  @ffi.Float()
  external double fRightDelay;

  @BOOL()
  external int lPanDelay;
}

class BASS_DX8_FLANGER extends ffi.Struct {
  @ffi.Float()
  external double fWetDryMix;

  @ffi.Float()
  external double fDepth;

  @ffi.Float()
  external double fFeedback;

  @ffi.Float()
  external double fFrequency;

  @DWORD()
  external int lWaveform;

  @ffi.Float()
  external double fDelay;

  @DWORD()
  external int lPhase;
}

class BASS_DX8_GARGLE extends ffi.Struct {
  @DWORD()
  external int dwRateHz;

  @DWORD()
  external int dwWaveShape;
}

class BASS_DX8_I3DL2REVERB extends ffi.Struct {
  @ffi.Int32()
  external int lRoom;

  @ffi.Int32()
  external int lRoomHF;

  @ffi.Float()
  external double flRoomRolloffFactor;

  @ffi.Float()
  external double flDecayTime;

  @ffi.Float()
  external double flDecayHFRatio;

  @ffi.Int32()
  external int lReflections;

  @ffi.Float()
  external double flReflectionsDelay;

  @ffi.Int32()
  external int lReverb;

  @ffi.Float()
  external double flReverbDelay;

  @ffi.Float()
  external double flDiffusion;

  @ffi.Float()
  external double flDensity;

  @ffi.Float()
  external double flHFReference;
}

class BASS_DX8_PARAMEQ extends ffi.Struct {
  @ffi.Float()
  external double fCenter;

  @ffi.Float()
  external double fBandwidth;

  @ffi.Float()
  external double fGain;
}

class BASS_DX8_REVERB extends ffi.Struct {
  @ffi.Float()
  external double fInGain;

  @ffi.Float()
  external double fReverbMix;

  @ffi.Float()
  external double fReverbTime;

  @ffi.Float()
  external double fHighFreqRTRatio;
}

class BASS_FX_VOLUME_PARAM extends ffi.Struct {
  @ffi.Float()
  external double fTarget;

  @ffi.Float()
  external double fCurrent;

  @ffi.Float()
  external double fTime;

  @DWORD()
  external int lCurve;
}

typedef HCHANNEL = DWORD;
typedef HSTREAM = DWORD;
typedef STREAMPROC = ffi.NativeFunction<
    DWORD Function(
        HSTREAM, ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>;
typedef DOWNLOADPROC = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>;
typedef HMUSIC = DWORD;
typedef HRECORD = DWORD;
typedef RECORDPROC = ffi.NativeFunction<
    BOOL Function(
        HRECORD, ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>;
typedef HSYNC = DWORD;
typedef SYNCPROC = ffi.NativeFunction<
    ffi.Void Function(HSYNC, DWORD, DWORD, ffi.Pointer<ffi.Void>)>;
typedef HDSP = DWORD;
typedef DSPPROC = ffi.NativeFunction<
    ffi.Void Function(
        HDSP, DWORD, ffi.Pointer<ffi.Void>, DWORD, ffi.Pointer<ffi.Void>)>;
typedef HFX = DWORD;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int TRUE = 1;

const int FALSE = 0;

const int BASSVERSION = 516;

const String BASSVERSIONTEXT = '2.4';

const int BASS_OK = 0;

const int BASS_ERROR_MEM = 1;

const int BASS_ERROR_FILEOPEN = 2;

const int BASS_ERROR_DRIVER = 3;

const int BASS_ERROR_BUFLOST = 4;

const int BASS_ERROR_HANDLE = 5;

const int BASS_ERROR_FORMAT = 6;

const int BASS_ERROR_POSITION = 7;

const int BASS_ERROR_INIT = 8;

const int BASS_ERROR_START = 9;

const int BASS_ERROR_SSL = 10;

const int BASS_ERROR_REINIT = 11;

const int BASS_ERROR_ALREADY = 14;

const int BASS_ERROR_NOTAUDIO = 17;

const int BASS_ERROR_NOCHAN = 18;

const int BASS_ERROR_ILLTYPE = 19;

const int BASS_ERROR_ILLPARAM = 20;

const int BASS_ERROR_NO3D = 21;

const int BASS_ERROR_NOEAX = 22;

const int BASS_ERROR_DEVICE = 23;

const int BASS_ERROR_NOPLAY = 24;

const int BASS_ERROR_FREQ = 25;

const int BASS_ERROR_NOTFILE = 27;

const int BASS_ERROR_NOHW = 29;

const int BASS_ERROR_EMPTY = 31;

const int BASS_ERROR_NONET = 32;

const int BASS_ERROR_CREATE = 33;

const int BASS_ERROR_NOFX = 34;

const int BASS_ERROR_NOTAVAIL = 37;

const int BASS_ERROR_DECODE = 38;

const int BASS_ERROR_DX = 39;

const int BASS_ERROR_TIMEOUT = 40;

const int BASS_ERROR_FILEFORM = 41;

const int BASS_ERROR_SPEAKER = 42;

const int BASS_ERROR_VERSION = 43;

const int BASS_ERROR_CODEC = 44;

const int BASS_ERROR_ENDED = 45;

const int BASS_ERROR_BUSY = 46;

const int BASS_ERROR_UNSTREAMABLE = 47;

const int BASS_ERROR_PROTOCOL = 48;

const int BASS_ERROR_UNKNOWN = -1;

const int BASS_CONFIG_BUFFER = 0;

const int BASS_CONFIG_UPDATEPERIOD = 1;

const int BASS_CONFIG_GVOL_SAMPLE = 4;

const int BASS_CONFIG_GVOL_STREAM = 5;

const int BASS_CONFIG_GVOL_MUSIC = 6;

const int BASS_CONFIG_CURVE_VOL = 7;

const int BASS_CONFIG_CURVE_PAN = 8;

const int BASS_CONFIG_FLOATDSP = 9;

const int BASS_CONFIG_3DALGORITHM = 10;

const int BASS_CONFIG_NET_TIMEOUT = 11;

const int BASS_CONFIG_NET_BUFFER = 12;

const int BASS_CONFIG_PAUSE_NOPLAY = 13;

const int BASS_CONFIG_NET_PREBUF = 15;

const int BASS_CONFIG_NET_PASSIVE = 18;

const int BASS_CONFIG_REC_BUFFER = 19;

const int BASS_CONFIG_NET_PLAYLIST = 21;

const int BASS_CONFIG_MUSIC_VIRTUAL = 22;

const int BASS_CONFIG_VERIFY = 23;

const int BASS_CONFIG_UPDATETHREADS = 24;

const int BASS_CONFIG_DEV_BUFFER = 27;

const int BASS_CONFIG_REC_LOOPBACK = 28;

const int BASS_CONFIG_VISTA_TRUEPOS = 30;

const int BASS_CONFIG_IOS_SESSION = 34;

const int BASS_CONFIG_IOS_MIXAUDIO = 34;

const int BASS_CONFIG_DEV_DEFAULT = 36;

const int BASS_CONFIG_NET_READTIMEOUT = 37;

const int BASS_CONFIG_VISTA_SPEAKERS = 38;

const int BASS_CONFIG_IOS_SPEAKER = 39;

const int BASS_CONFIG_MF_DISABLE = 40;

const int BASS_CONFIG_HANDLES = 41;

const int BASS_CONFIG_UNICODE = 42;

const int BASS_CONFIG_SRC = 43;

const int BASS_CONFIG_SRC_SAMPLE = 44;

const int BASS_CONFIG_ASYNCFILE_BUFFER = 45;

const int BASS_CONFIG_OGG_PRESCAN = 47;

const int BASS_CONFIG_MF_VIDEO = 48;

const int BASS_CONFIG_AIRPLAY = 49;

const int BASS_CONFIG_DEV_NONSTOP = 50;

const int BASS_CONFIG_IOS_NOCATEGORY = 51;

const int BASS_CONFIG_VERIFY_NET = 52;

const int BASS_CONFIG_DEV_PERIOD = 53;

const int BASS_CONFIG_FLOAT = 54;

const int BASS_CONFIG_NET_SEEK = 56;

const int BASS_CONFIG_AM_DISABLE = 58;

const int BASS_CONFIG_NET_PLAYLIST_DEPTH = 59;

const int BASS_CONFIG_NET_PREBUF_WAIT = 60;

const int BASS_CONFIG_ANDROID_SESSIONID = 62;

const int BASS_CONFIG_WASAPI_PERSIST = 65;

const int BASS_CONFIG_REC_WASAPI = 66;

const int BASS_CONFIG_ANDROID_AAUDIO = 67;

const int BASS_CONFIG_SAMPLE_ONEHANDLE = 69;

const int BASS_CONFIG_DEV_TIMEOUT = 70;

const int BASS_CONFIG_NET_META = 71;

const int BASS_CONFIG_NET_RESTRATE = 72;

const int BASS_CONFIG_NET_AGENT = 16;

const int BASS_CONFIG_NET_PROXY = 17;

const int BASS_CONFIG_IOS_NOTIFY = 46;

const int BASS_CONFIG_LIBSSL = 64;

const int BASS_CONFIG_THREAD = 1073741824;

const int BASS_IOS_SESSION_MIX = 1;

const int BASS_IOS_SESSION_DUCK = 2;

const int BASS_IOS_SESSION_AMBIENT = 4;

const int BASS_IOS_SESSION_SPEAKER = 8;

const int BASS_IOS_SESSION_DISABLE = 16;

const int BASS_DEVICE_8BITS = 1;

const int BASS_DEVICE_MONO = 2;

const int BASS_DEVICE_3D = 4;

const int BASS_DEVICE_16BITS = 8;

const int BASS_DEVICE_REINIT = 128;

const int BASS_DEVICE_LATENCY = 256;

const int BASS_DEVICE_CPSPEAKERS = 1024;

const int BASS_DEVICE_SPEAKERS = 2048;

const int BASS_DEVICE_NOSPEAKER = 4096;

const int BASS_DEVICE_DMIX = 8192;

const int BASS_DEVICE_FREQ = 16384;

const int BASS_DEVICE_STEREO = 32768;

const int BASS_DEVICE_HOG = 65536;

const int BASS_DEVICE_AUDIOTRACK = 131072;

const int BASS_DEVICE_DSOUND = 262144;

const int BASS_DEVICE_SOFTWARE = 524288;

const int BASS_OBJECT_DS = 1;

const int BASS_OBJECT_DS3DL = 2;

const int BASS_DEVICE_ENABLED = 1;

const int BASS_DEVICE_DEFAULT = 2;

const int BASS_DEVICE_INIT = 4;

const int BASS_DEVICE_LOOPBACK = 8;

const int BASS_DEVICE_DEFAULTCOM = 128;

const int BASS_DEVICE_TYPE_MASK = 4278190080;

const int BASS_DEVICE_TYPE_NETWORK = 16777216;

const int BASS_DEVICE_TYPE_SPEAKERS = 33554432;

const int BASS_DEVICE_TYPE_LINE = 50331648;

const int BASS_DEVICE_TYPE_HEADPHONES = 67108864;

const int BASS_DEVICE_TYPE_MICROPHONE = 83886080;

const int BASS_DEVICE_TYPE_HEADSET = 100663296;

const int BASS_DEVICE_TYPE_HANDSET = 117440512;

const int BASS_DEVICE_TYPE_DIGITAL = 134217728;

const int BASS_DEVICE_TYPE_SPDIF = 150994944;

const int BASS_DEVICE_TYPE_HDMI = 167772160;

const int BASS_DEVICE_TYPE_DISPLAYPORT = 1073741824;

const int BASS_DEVICES_AIRPLAY = 16777216;

const int DSCAPS_EMULDRIVER = 32;

const int DSCAPS_CERTIFIED = 64;

const int DSCAPS_HARDWARE = 2147483648;

const int DSCCAPS_EMULDRIVER = 32;

const int DSCCAPS_CERTIFIED = 64;

const int WAVE_FORMAT_1M08 = 1;

const int WAVE_FORMAT_1S08 = 2;

const int WAVE_FORMAT_1M16 = 4;

const int WAVE_FORMAT_1S16 = 8;

const int WAVE_FORMAT_2M08 = 16;

const int WAVE_FORMAT_2S08 = 32;

const int WAVE_FORMAT_2M16 = 64;

const int WAVE_FORMAT_2S16 = 128;

const int WAVE_FORMAT_4M08 = 256;

const int WAVE_FORMAT_4S08 = 512;

const int WAVE_FORMAT_4M16 = 1024;

const int WAVE_FORMAT_4S16 = 2048;

const int BASS_SAMPLE_8BITS = 1;

const int BASS_SAMPLE_FLOAT = 256;

const int BASS_SAMPLE_MONO = 2;

const int BASS_SAMPLE_LOOP = 4;

const int BASS_SAMPLE_3D = 8;

const int BASS_SAMPLE_SOFTWARE = 16;

const int BASS_SAMPLE_MUTEMAX = 32;

const int BASS_SAMPLE_VAM = 64;

const int BASS_SAMPLE_FX = 128;

const int BASS_SAMPLE_OVER_VOL = 65536;

const int BASS_SAMPLE_OVER_POS = 131072;

const int BASS_SAMPLE_OVER_DIST = 196608;

const int BASS_STREAM_PRESCAN = 131072;

const int BASS_STREAM_AUTOFREE = 262144;

const int BASS_STREAM_RESTRATE = 524288;

const int BASS_STREAM_BLOCK = 1048576;

const int BASS_STREAM_DECODE = 2097152;

const int BASS_STREAM_STATUS = 8388608;

const int BASS_MP3_IGNOREDELAY = 512;

const int BASS_MP3_SETPOS = 131072;

const int BASS_MUSIC_FLOAT = 256;

const int BASS_MUSIC_MONO = 2;

const int BASS_MUSIC_LOOP = 4;

const int BASS_MUSIC_3D = 8;

const int BASS_MUSIC_FX = 128;

const int BASS_MUSIC_AUTOFREE = 262144;

const int BASS_MUSIC_DECODE = 2097152;

const int BASS_MUSIC_PRESCAN = 131072;

const int BASS_MUSIC_CALCLEN = 131072;

const int BASS_MUSIC_RAMP = 512;

const int BASS_MUSIC_RAMPS = 1024;

const int BASS_MUSIC_SURROUND = 2048;

const int BASS_MUSIC_SURROUND2 = 4096;

const int BASS_MUSIC_FT2PAN = 8192;

const int BASS_MUSIC_FT2MOD = 8192;

const int BASS_MUSIC_PT1MOD = 16384;

const int BASS_MUSIC_NONINTER = 65536;

const int BASS_MUSIC_SINCINTER = 8388608;

const int BASS_MUSIC_POSRESET = 32768;

const int BASS_MUSIC_POSRESETEX = 4194304;

const int BASS_MUSIC_STOPBACK = 524288;

const int BASS_MUSIC_NOSAMPLE = 1048576;

const int BASS_SPEAKER_FRONT = 16777216;

const int BASS_SPEAKER_REAR = 33554432;

const int BASS_SPEAKER_CENLFE = 50331648;

const int BASS_SPEAKER_REAR2 = 67108864;

const int BASS_SPEAKER_LEFT = 268435456;

const int BASS_SPEAKER_RIGHT = 536870912;

const int BASS_SPEAKER_FRONTLEFT = 285212672;

const int BASS_SPEAKER_FRONTRIGHT = 553648128;

const int BASS_SPEAKER_REARLEFT = 301989888;

const int BASS_SPEAKER_REARRIGHT = 570425344;

const int BASS_SPEAKER_CENTER = 318767104;

const int BASS_SPEAKER_LFE = 587202560;

const int BASS_SPEAKER_REAR2LEFT = 335544320;

const int BASS_SPEAKER_REAR2RIGHT = 603979776;

const int BASS_ASYNCFILE = 1073741824;

const int BASS_UNICODE = 2147483648;

const int BASS_RECORD_PAUSE = 32768;

const int BASS_RECORD_ECHOCANCEL = 8192;

const int BASS_RECORD_AGC = 16384;

const int BASS_VAM_HARDWARE = 1;

const int BASS_VAM_SOFTWARE = 2;

const int BASS_VAM_TERM_TIME = 4;

const int BASS_VAM_TERM_DIST = 8;

const int BASS_VAM_TERM_PRIO = 16;

const int BASS_ORIGRES_FLOAT = 65536;

const int BASS_CTYPE_SAMPLE = 1;

const int BASS_CTYPE_RECORD = 2;

const int BASS_CTYPE_STREAM = 65536;

const int BASS_CTYPE_STREAM_VORBIS = 65538;

const int BASS_CTYPE_STREAM_OGG = 65538;

const int BASS_CTYPE_STREAM_MP1 = 65539;

const int BASS_CTYPE_STREAM_MP2 = 65540;

const int BASS_CTYPE_STREAM_MP3 = 65541;

const int BASS_CTYPE_STREAM_AIFF = 65542;

const int BASS_CTYPE_STREAM_CA = 65543;

const int BASS_CTYPE_STREAM_MF = 65544;

const int BASS_CTYPE_STREAM_AM = 65545;

const int BASS_CTYPE_STREAM_SAMPLE = 65546;

const int BASS_CTYPE_STREAM_DUMMY = 98304;

const int BASS_CTYPE_STREAM_DEVICE = 98305;

const int BASS_CTYPE_STREAM_WAV = 262144;

const int BASS_CTYPE_STREAM_WAV_PCM = 327681;

const int BASS_CTYPE_STREAM_WAV_FLOAT = 327683;

const int BASS_CTYPE_MUSIC_MOD = 131072;

const int BASS_CTYPE_MUSIC_MTM = 131073;

const int BASS_CTYPE_MUSIC_S3M = 131074;

const int BASS_CTYPE_MUSIC_XM = 131075;

const int BASS_CTYPE_MUSIC_IT = 131076;

const int BASS_CTYPE_MUSIC_MO3 = 256;

const int BASS_3DMODE_NORMAL = 0;

const int BASS_3DMODE_RELATIVE = 1;

const int BASS_3DMODE_OFF = 2;

const int BASS_3DALG_DEFAULT = 0;

const int BASS_3DALG_OFF = 1;

const int BASS_3DALG_FULL = 2;

const int BASS_3DALG_LIGHT = 3;

const int BASS_SAMCHAN_NEW = 1;

const int BASS_SAMCHAN_STREAM = 2;

const int BASS_STREAMPROC_END = 2147483648;

const int STREAMFILE_NOBUFFER = 0;

const int STREAMFILE_BUFFER = 1;

const int STREAMFILE_BUFFERPUSH = 2;

const int BASS_FILEDATA_END = 0;

const int BASS_FILEPOS_CURRENT = 0;

const int BASS_FILEPOS_DECODE = 0;

const int BASS_FILEPOS_DOWNLOAD = 1;

const int BASS_FILEPOS_END = 2;

const int BASS_FILEPOS_START = 3;

const int BASS_FILEPOS_CONNECTED = 4;

const int BASS_FILEPOS_BUFFER = 5;

const int BASS_FILEPOS_SOCKET = 6;

const int BASS_FILEPOS_ASYNCBUF = 7;

const int BASS_FILEPOS_SIZE = 8;

const int BASS_FILEPOS_BUFFERING = 9;

const int BASS_FILEPOS_AVAILABLE = 10;

const int BASS_SYNC_POS = 0;

const int BASS_SYNC_END = 2;

const int BASS_SYNC_META = 4;

const int BASS_SYNC_SLIDE = 5;

const int BASS_SYNC_STALL = 6;

const int BASS_SYNC_DOWNLOAD = 7;

const int BASS_SYNC_FREE = 8;

const int BASS_SYNC_SETPOS = 11;

const int BASS_SYNC_MUSICPOS = 10;

const int BASS_SYNC_MUSICINST = 1;

const int BASS_SYNC_MUSICFX = 3;

const int BASS_SYNC_OGG_CHANGE = 12;

const int BASS_SYNC_DEV_FAIL = 14;

const int BASS_SYNC_DEV_FORMAT = 15;

const int BASS_SYNC_THREAD = 536870912;

const int BASS_SYNC_MIXTIME = 1073741824;

const int BASS_SYNC_ONETIME = 2147483648;

const int BASS_ACTIVE_STOPPED = 0;

const int BASS_ACTIVE_PLAYING = 1;

const int BASS_ACTIVE_STALLED = 2;

const int BASS_ACTIVE_PAUSED = 3;

const int BASS_ACTIVE_PAUSED_DEVICE = 4;

const int BASS_ATTRIB_FREQ = 1;

const int BASS_ATTRIB_VOL = 2;

const int BASS_ATTRIB_PAN = 3;

const int BASS_ATTRIB_EAXMIX = 4;

const int BASS_ATTRIB_NOBUFFER = 5;

const int BASS_ATTRIB_VBR = 6;

const int BASS_ATTRIB_CPU = 7;

const int BASS_ATTRIB_SRC = 8;

const int BASS_ATTRIB_NET_RESUME = 9;

const int BASS_ATTRIB_SCANINFO = 10;

const int BASS_ATTRIB_NORAMP = 11;

const int BASS_ATTRIB_BITRATE = 12;

const int BASS_ATTRIB_BUFFER = 13;

const int BASS_ATTRIB_GRANULE = 14;

const int BASS_ATTRIB_USER = 15;

const int BASS_ATTRIB_TAIL = 16;

const int BASS_ATTRIB_PUSH_LIMIT = 17;

const int BASS_ATTRIB_MUSIC_AMPLIFY = 256;

const int BASS_ATTRIB_MUSIC_PANSEP = 257;

const int BASS_ATTRIB_MUSIC_PSCALER = 258;

const int BASS_ATTRIB_MUSIC_BPM = 259;

const int BASS_ATTRIB_MUSIC_SPEED = 260;

const int BASS_ATTRIB_MUSIC_VOL_GLOBAL = 261;

const int BASS_ATTRIB_MUSIC_ACTIVE = 262;

const int BASS_ATTRIB_MUSIC_VOL_CHAN = 512;

const int BASS_ATTRIB_MUSIC_VOL_INST = 768;

const int BASS_SLIDE_LOG = 16777216;

const int BASS_DATA_AVAILABLE = 0;

const int BASS_DATA_NOREMOVE = 268435456;

const int BASS_DATA_FIXED = 536870912;

const int BASS_DATA_FLOAT = 1073741824;

const int BASS_DATA_FFT256 = 2147483648;

const int BASS_DATA_FFT512 = 2147483649;

const int BASS_DATA_FFT1024 = 2147483650;

const int BASS_DATA_FFT2048 = 2147483651;

const int BASS_DATA_FFT4096 = 2147483652;

const int BASS_DATA_FFT8192 = 2147483653;

const int BASS_DATA_FFT16384 = 2147483654;

const int BASS_DATA_FFT32768 = 2147483655;

const int BASS_DATA_FFT_INDIVIDUAL = 16;

const int BASS_DATA_FFT_NOWINDOW = 32;

const int BASS_DATA_FFT_REMOVEDC = 64;

const int BASS_DATA_FFT_COMPLEX = 128;

const int BASS_DATA_FFT_NYQUIST = 256;

const int BASS_LEVEL_MONO = 1;

const int BASS_LEVEL_STEREO = 2;

const int BASS_LEVEL_RMS = 4;

const int BASS_LEVEL_VOLPAN = 8;

const int BASS_LEVEL_NOREMOVE = 16;

const int BASS_TAG_ID3 = 0;

const int BASS_TAG_ID3V2 = 1;

const int BASS_TAG_OGG = 2;

const int BASS_TAG_HTTP = 3;

const int BASS_TAG_ICY = 4;

const int BASS_TAG_META = 5;

const int BASS_TAG_APE = 6;

const int BASS_TAG_MP4 = 7;

const int BASS_TAG_WMA = 8;

const int BASS_TAG_VENDOR = 9;

const int BASS_TAG_LYRICS3 = 10;

const int BASS_TAG_CA_CODEC = 11;

const int BASS_TAG_MF = 13;

const int BASS_TAG_WAVEFORMAT = 14;

const int BASS_TAG_AM_NAME = 16;

const int BASS_TAG_ID3V2_2 = 17;

const int BASS_TAG_AM_MIME = 18;

const int BASS_TAG_LOCATION = 19;

const int BASS_TAG_RIFF_INFO = 256;

const int BASS_TAG_RIFF_BEXT = 257;

const int BASS_TAG_RIFF_CART = 258;

const int BASS_TAG_RIFF_DISP = 259;

const int BASS_TAG_RIFF_CUE = 260;

const int BASS_TAG_RIFF_SMPL = 261;

const int BASS_TAG_APE_BINARY = 4096;

const int BASS_TAG_MUSIC_NAME = 65536;

const int BASS_TAG_MUSIC_MESSAGE = 65537;

const int BASS_TAG_MUSIC_ORDERS = 65538;

const int BASS_TAG_MUSIC_AUTH = 65539;

const int BASS_TAG_MUSIC_INST = 65792;

const int BASS_TAG_MUSIC_CHAN = 66048;

const int BASS_TAG_MUSIC_SAMPLE = 66304;

const int BASS_POS_BYTE = 0;

const int BASS_POS_MUSIC_ORDER = 1;

const int BASS_POS_OGG = 3;

const int BASS_POS_END = 16;

const int BASS_POS_LOOP = 17;

const int BASS_POS_FLUSH = 16777216;

const int BASS_POS_RESET = 33554432;

const int BASS_POS_RELATIVE = 67108864;

const int BASS_POS_INEXACT = 134217728;

const int BASS_POS_DECODE = 268435456;

const int BASS_POS_DECODETO = 536870912;

const int BASS_POS_SCAN = 1073741824;

const int BASS_NODEVICE = 131072;

const int BASS_INPUT_OFF = 65536;

const int BASS_INPUT_ON = 131072;

const int BASS_INPUT_TYPE_MASK = 4278190080;

const int BASS_INPUT_TYPE_UNDEF = 0;

const int BASS_INPUT_TYPE_DIGITAL = 16777216;

const int BASS_INPUT_TYPE_LINE = 33554432;

const int BASS_INPUT_TYPE_MIC = 50331648;

const int BASS_INPUT_TYPE_SYNTH = 67108864;

const int BASS_INPUT_TYPE_CD = 83886080;

const int BASS_INPUT_TYPE_PHONE = 100663296;

const int BASS_INPUT_TYPE_SPEAKER = 117440512;

const int BASS_INPUT_TYPE_WAVE = 134217728;

const int BASS_INPUT_TYPE_AUX = 150994944;

const int BASS_INPUT_TYPE_ANALOG = 167772160;

const int BASS_FX_DX8_CHORUS = 0;

const int BASS_FX_DX8_COMPRESSOR = 1;

const int BASS_FX_DX8_DISTORTION = 2;

const int BASS_FX_DX8_ECHO = 3;

const int BASS_FX_DX8_FLANGER = 4;

const int BASS_FX_DX8_GARGLE = 5;

const int BASS_FX_DX8_I3DL2REVERB = 6;

const int BASS_FX_DX8_PARAMEQ = 7;

const int BASS_FX_DX8_REVERB = 8;

const int BASS_FX_VOLUME = 9;

const int BASS_DX8_PHASE_NEG_180 = 0;

const int BASS_DX8_PHASE_NEG_90 = 1;

const int BASS_DX8_PHASE_ZERO = 2;

const int BASS_DX8_PHASE_90 = 3;

const int BASS_DX8_PHASE_180 = 4;

const int BASS_IOSNOTIFY_INTERRUPT = 1;

const int BASS_IOSNOTIFY_INTERRUPT_END = 2;
